{"version":3,"sources":["Community.js","App.js","serviceWorker.js","index.js"],"names":["Community","this","props","name","overview","entry","logo","twitter","discord","establish","tag","Card","style","width","Header","as","Body","Img","variant","height","src","Text","ListGroup","className","ListGroupItem","Link","href","slice","Component","App","state","communities","fetch","then","response","json","responseJson","setState","catch","error","console","CardColumns","map","community","key","timestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTAiDeA,E,uKA7CH,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,KACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,MACAC,EALK,EAKLA,KACAC,EANK,EAMLA,QACAC,EAPK,EAOLA,QACAC,EARK,EAQLA,UACAC,EATK,EASLA,IAKF,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,OAAN,CAAaC,GAAG,MAAMZ,GACtB,kBAACQ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,IAAN,CAAUC,QAAQ,MAAMN,MAAO,CAAEO,OAAQ,OAAQN,MAAO,QAAUO,IAAKd,GAN1D,iFAOb,kBAACK,EAAA,EAAKU,KAAN,KACGjB,GAEH,kBAACO,EAAA,EAAKU,KAAN,KACGhB,IAGL,kBAACiB,EAAA,EAAD,CAAWC,UAAU,oBACnB,kBAACC,EAAA,EAAD,KAAgBf,GAChB,kBAACe,EAAA,EAAD,KAAgBd,IAElB,kBAACC,EAAA,EAAKK,KAAN,KACGT,EACG,kBAACI,EAAA,EAAKc,KAAN,CAAWC,KAAI,8BAAyBnB,EAAQoB,MAAM,KAAtD,WACA,kBAAChB,EAAA,EAAKc,KAAN,mBAEHjB,EACG,kBAACG,EAAA,EAAKc,KAAN,CAAWC,KAAMlB,GAAjB,WACA,kBAACG,EAAA,EAAKc,KAAN,yB,GAtCUG,a,QCuCTC,E,4MApCbC,MAAQ,CAAEC,YAAa,I,kEACF,IAAD,OAClBC,MAAM,mGACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZN,YAAaK,EAAaL,iBAG7BO,OAAM,SAACC,GACNC,QAAQD,MAAMA,Q,+BAKlB,OACE,yBAAKhB,UAAU,OACb,kBAACkB,EAAA,EAAD,KACGxC,KAAK6B,MAAMC,YAAYW,KAAI,SAAAC,GAAS,OACnC,kBAAC,EAAD,CACEC,IAAKD,EAAUE,UACf1C,KAAMwC,EAAUxC,KAChBC,SAAUuC,EAAUvC,SACpBC,MAAOsC,EAAUtC,MACjBC,KAAMqC,EAAUrC,KAChBC,QAASoC,EAAUpC,QACnBC,QAASmC,EAAUnC,QACnBC,UAAWkC,EAAUlC,qB,GA5BjBmB,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,4FACA,uBAAG3B,KAAK,mHAAR,wCAAoI,6BACpI,sEACA,kBAAC,EAAD,OAEF4B,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.d21dfb24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, ListGroup, ListGroupItem } from 'react-bootstrap';\n\nclass Community extends Component {\n  render() {\n    const {\n      name,\n      overview,\n      entry,\n      logo,\n      twitter,\n      discord,\n      establish,\n      tag\n    } = this.props;\n\n    var logo_defualt = \"https://drive.google.com/uc?export=view&id=1TcSrq_O2MXPYrmOHhqSRwa0ZQ1vNjLF7\";\n\n    return (\n      <Card style={{ width: '18rem' }}>\n        <Card.Header as=\"h5\">{name}</Card.Header>\n        <Card.Body>\n          <Card.Img variant=\"top\" style={{ height: '4rem', width: \"auto\" }} src={logo ? logo : logo_defualt} />\n          <Card.Text>\n            {overview}\n          </Card.Text>\n          <Card.Text>\n            {entry}\n          </Card.Text>\n        </Card.Body>\n        <ListGroup className=\"list-group-flush\">\n          <ListGroupItem>{establish}</ListGroupItem>\n          <ListGroupItem>{tag}</ListGroupItem>\n        </ListGroup>\n        <Card.Body>\n          {twitter\n            ? <Card.Link href={`https://twitter.com/${twitter.slice(1)}`} >Twitter</Card.Link>\n            : <Card.Link >No Twitter</Card.Link>\n          }\n          {discord\n            ? <Card.Link href={discord} >Discord</Card.Link>\n            : <Card.Link >No Discord</Card.Link>\n          }\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Community;","import React, { Component } from 'react';\nimport './App.css';\nimport Community from './Community';\nimport { CardColumns } from 'react-bootstrap';\n\nclass App extends Component {\n  state = { communities: [] };\n  componentDidMount() {\n    fetch('https://script.google.com/macros/s/AKfycbyXfZM331ywgXy-LK6kRRJONO8hPZgaW24gu_bDr-2tN3USM3Q/exec')\n      .then((response) => response.json())\n      .then((responseJson) =>\n        this.setState({\n          communities: responseJson.communities,\n        })\n      )\n      .catch((error) => {\n        console.error(error);\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CardColumns>\n          {this.state.communities.map(community =>\n            <Community\n              key={community.timestamp}\n              name={community.name}\n              overview={community.overview}\n              entry={community.entry}\n              logo={community.logo}\n              twitter={community.twitter}\n              discord={community.discord}\n              establish={community.establish}\n            />)\n          }\n        </CardColumns>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>VRChatコミュニティリスト</h1>\n    <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfarK2mEykbP4g7mz-_Wq14j62NHK5rw_Zw-YFNYysELntJIQ/viewform?usp=sf_link\">登録フォーム</a><br/>\n    <div>Unity Prefab： https://xxxxxxxxx </div>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}